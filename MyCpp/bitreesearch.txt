
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define maxsize 1000

typedef char datatype;

typedef struct  node
{
 datatype data;
 struct node *lchild, *rchild;
}bitree;

bitree *CreatTree()
{
 char ch;
 bitree *Q[maxsize];
 int front, rear;
 bitree *root, *s;
 root = NULL;
 front = 1, rear = 0;
 printf("输入二叉树个节点，@表示虚结点，# end\n");
 scanf("%c",&ch);
 while (ch!='#')
 {
  putchar(ch);
  s= NULL;
  if(ch!='@')
  {
   s=(bitree *)malloc(sizeof(bitree));
   s->data = ch;
   s->lchild = NULL;
   s->rchild = NULL;
  }
  rear++;
  Q[rear] = s;
  if (rear==1) root =s;
  else
  {
   if (s&&Q[front])
            {
                if(rear%2 ==0)
                {
                    Q[front]->lchild = s;
                }
                else
                {
                    Q[front]->rchild=s;
                }
            }
            if (rear%2==1)
            {
                front ++;
            }
  }
  scanf("%c",&ch);

 }
 return root;
}

void preorder(bitree *p)
{
    if(p!=NULL)
    {
        printf("%C ", p->data);
        preorder(p->lchild);
        preorder(p->rchild);
    }
    return ;
}

void inorder(bitree *p)
{
    if(p!=NULL)
    {
        inorder(p->lchild);
        printf("%C ", p->data);
        inorder(p->rchild);
    }
    return ;
}

void postorder(bitree *p)
{
    if(p!=NULL)
    {
        postorder(p->lchild);
        postorder(p->rchild);
        printf("%C ", p->data);
    }
    return ;
}

bitree *Search(bitree *b, char x)
{
    if(b->data == x)
    {
        return b;
    }
    if(b->lchild != NULL)
    {
        return (Search(b->lchild,x));
    }
    if(b->rchild != NULL)
    {
        return (Search(b->rchild,x));
    }
    return NULL;

}

void main()
{
    datatype c;
    bitree *root,*bt ;
    root = CreatTree();
 printf("\n");
    preorder(root);//先序
 printf("\n");
    inorder(root); //中序
 printf("\n");
    postorder(root);//后序
 printf("\n");
 scanf("%s",&c);
 bt=Search(root,c);
 printf("%c\n",bt->data);
}

 

 


  