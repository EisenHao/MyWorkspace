;_INT1中断 服务程序控制步进电机 正反步进
;字节变量 ******************************
PHASE_OUT	EQU	30H			;步进电机相位通电状态
VAR_END		EQU	30H			;最后一个字节变量的位置，
						;应根据实际需要修改
;堆栈定义 ******************************
STACK_INI	EQU	VAR_END+1		;须保证足够的空间

;程序 ******************************************
		ORG	0000H			;复位入口
		LJMP	MAIN
		
		ORG	0003H			;外部中断0 服务程序入口
		LJMP	INT_EX0
		
		ORG	0013H			;外部中断1 服务程序入口
		LJMP	INT_EX1

		ORG	040H			;复位处理程序
;主程序 ****************************************
MAIN:		MOV	SP,#STACK_INI		;设置栈底指针
;初始化外部设备 ********************************	
	
;中断设置 ******************************
		;此处添加设置中断触发方式的指令(IT0, IT1)
		SETB	IT0	;SETB 外部中断 触发方式 脉冲方式
		SETB	IT1
		;此处添加设置中断许可的指令(EX0, EX1)
		SETB	EX0	;
		SETB	EX1
		;此处添加设置中断优先的指令(PX0, PX1)
		SETB	PX0
		CLR	PX1

;初始化变量 ****************************
		;如果定义了变量, 此处添加对变量的初始化指令
		MOV	R1,#PHASE_OUT
		MOV	@R1,#11H
;开中断 ********************************
		SETB	EA					
;死循环
		SJMP	$
		RET
;INT0中断服务程序 ******************************
INT_EX0:
;正向步进 1步
		;此处添加保护现场内容的指令(如果需要)
		MOV	A,@R1
		;此处添加正向步进驱动的指令(A→B→C→D→A
		RL	A	;循环左移
		MOV	P1,A
		;此处添加恢复现场内容的指令(如果需要)
		MOV	@R1,A
		RETI
;INT1中断服务程序 ******************************
INT_EX1:
;反向步进 1步
		;此处添加保护现场内容的指令(如果需要)
		MOV	A,@R1
		;此处添加反向步进驱动的指令(A→D→C→B→A→D…)
		RR	A	;循环右移
		MOV	P1,A
		;此处添加恢复现场内容的指令(如果需要)
		MOV	@R1,A
		RETI
;程序结束 **************************************
		END

